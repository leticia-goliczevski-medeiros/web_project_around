!function(){"use strict";var e={869:function(e,t,r){e.exports=r.p+"7c0ea9c25b78e7db700e.png"},428:function(e,t,r){e.exports=r.p+"628c1a38836245613d2a.png"}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i(n.key),n)}}function i(e){var t=function(e){if("object"!=n(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=n(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==n(t)?t:t+""}r.m=e,r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r.b=document.baseURI||self.location.href;var u=function(){return e=function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputsSelector=t.inputsSelector,this._buttonElementSelector=t.buttonElementSelector,this._buttonElementClass=t.buttonElementClass,this._errorClass=t.errorClass,this._inputErrorClass=t.inputErrorClass,this._formElement=r},(t=[{key:"enableValidation",value:function(){this._validateInputs()}},{key:"_validateInputs",value:function(){var e=this,t=Array.from(this._formElement.querySelectorAll(this._inputsSelector)),r=this._formElement.querySelector(this._buttonElementSelector);this._toggleButtonState(t,r,c),t.forEach((function(n){n.addEventListener("input",(function(){e._isValid(n),e._toggleButtonState(t,r)}))}))}},{key:"_isValid",value:function(e){if(e.validity.valid)this._hideInputError(e);else{var t=e.validationMessage;this._showInputError(e,t)}}},{key:"_toggleButtonState",value:function(e,t){this._hasInvalidInput(e)?(t.classList.add(c.buttonElementClass),t.setAttribute("disabled",!0)):(t.classList.remove(this._buttonElementClass),t.removeAttribute("disabled",!0))}},{key:"_showInputError",value:function(e,t){var r=e.nextElementSibling;e.classList.add(this._inputErrorClass),r.classList.add(this._errorClass),r.textContent=t}},{key:"_hideInputError",value:function(e){var t=e.nextElementSibling;e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}}])&&o(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}(),c={inputsSelector:".popup__input",buttonElementSelector:".popup__submit-button",buttonElementClass:"popup__submit-button_inactive",errorClass:"popup__input-error_active",inputErrorClass:"popup__input_type_error"},a=function(){Array.from(document.forms).forEach((function(e){var t=Array.from(e.querySelectorAll(c.inputsSelector));e.reset(),t.forEach((function(e){var t=e.nextElementSibling;e.classList.remove(c.inputErrorClass),t.classList.remove(c.errorClass),t.textContent=""}))}))};function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,f(n.key),n)}}function f(e){var t=function(e){if("object"!=l(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=l(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==l(t)?t:t+""}var p=function(){return e=function e(t,r){var n=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=n,this._renderer=o,this._container=document.querySelector(r)},(t=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&s(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function y(e){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y(e)}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,d(n.key),n)}}function d(e){var t=function(e){if("object"!=y(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=y(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==y(t)?t:t+""}var h=function(){return e=function e(t){var r=t.item,n=t.templateSelector,o=t.handleCardClick,i=t.addLike,u=t.removeLike,c=t.user,a=t.removeCard,l=t.handleDeleteClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._item=r,this._name=r.name,this._link=r.link,this._owner=r.owner,this._cardId=r._id,this._templateSelector=n,this._handleCardClick=o,this._addLike=i,this._removeLike=u,this._user=c,this._userId=c._id,this._removeCard=a,this._handleDeleteClick=l},(t=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".gallery__card").cloneNode(!0)}},{key:"generateCard",value:function(){var e=this;return this._element=this._getTemplate(),this._element.querySelector(".gallery__card-title").textContent=this._name,this._element.querySelector(".gallery__card-title").setAttribute("alt",this._name),this._element.querySelector(".gallery__card-image").src=this._link,this._likeButton=this._element.querySelector(".gallery__heart-icon"),this._heartIcon=new URL(r(428),r.b),this._heartIconActive=new URL(r(869),r.b),this._item.isLiked?this._likeButton.setAttribute("src",this._heartIconActive):this._likeButton.setAttribute("src",this._heartIcon),this._setEventListeners(),this._deleteIcon=this._element.querySelector(".gallery__delete-icon"),this._deleteIcon.addEventListener("click",(function(){e._handleDeleteClick(e._cardId,e._element)})),this._element}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".gallery__card-image").addEventListener("click",(function(){e._handleCardClick({name:e._name,link:e._link})})),this._likeButton.addEventListener("click",(function(){e._enableLikeButton()}))}},{key:"_enableLikeButton",value:function(){this._heartIconSource=this._likeButton.getAttribute("src"),this._heartIcon.href.includes(this._heartIconSource)?(this._likeButton.setAttribute("src",this._heartIconActive),this._addLike(this._item)):(this._likeButton.setAttribute("src",this._heartIcon),this._removeLike(this._item))}}])&&m(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,_(n.key),n)}}function _(e){var t=function(e){if("object"!=v(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=v(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==v(t)?t:t+""}var S=function(){return e=function e(t){var r=t.profileNameSelector,n=t.profileDescriptionSelector;t.user,function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=document.querySelector(r),this._profileDescription=document.querySelector(n),this._profilePicture=document.querySelector(".profile__picture")},t=[{key:"getUserInfo",value:function(){return{userName:this._profileName.textContent,userDescription:this._profileDescription.textContent}}},{key:"setUserInfo",value:function(e){this._profileName.textContent=e.name,this._profileDescription.textContent=e.about,this._profilePicture.setAttribute("src",e.avatar)}}],t&&b(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function g(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,E(n.key),n)}}function E(e){var t=function(e){if("object"!=k(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=k(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==k(t)?t:t+""}var w=function(){return e=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._popupSection=this._popup.parentElement,this._popupCloseIcon=this._popup.querySelector(".popup__close-icon"),this._handleEscClose=this._handleEscClose.bind(this),this._handleClickOutside=this._handleClickOutside.bind(this),this.close=this.close.bind(this)},(t=[{key:"open",value:function(){this._popupSection.classList.add("popup_popup_opened"),this.setEventListeners()}},{key:"close",value:function(){this._popupSection.classList.remove("popup_popup_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupSection.removeEventListener("click",this._handleClickOutside),this._popupCloseIcon.removeEventListener("click",this.close)}},{key:"_handleClickOutside",value:function(e){"SECTION"==e.target.tagName&&this.close()}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popupSection.addEventListener("click",this._handleClickOutside),this._popupCloseIcon.addEventListener("click",this.close)}}])&&g(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function j(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,O(n.key),n)}}function O(e){var t=function(e){if("object"!=C(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=C(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==C(t)?t:t+""}function P(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(P=function(){return!!e})()}function L(){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=function(e,t){for(;!{}.hasOwnProperty.call(e,t)&&null!==(e=I(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},L.apply(null,arguments)}function I(e){return I=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},I(e)}function q(e,t){return q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},q(e,t)}var R=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=function(e,t,r){return t=I(t),function(e,t){if(t&&("object"==C(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,P()?Reflect.construct(t,r||[],I(e).constructor):t.apply(e,r))}(this,t,[e]))._popupImage=r._popup.querySelector(".image-popup__image"),r._popupTitle=r._popup.querySelector(".image-popup__title"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&q(e,t)}(t,e),r=t,n=[{key:"open",value:function(e){var r,n,o;this._popupImage.src=e.link,this._popupTitle.textContent=e.name,(r=t,n=this,"function"==typeof(o=L(I(1&3?r.prototype:r),"open",n))?function(e){return o.apply(n,e)}:o)([])}}],n&&j(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n}(w);function T(e){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(e)}function x(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,D(n.key),n)}}function D(e){var t=function(e){if("object"!=T(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=T(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==T(t)?t:t+""}function A(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(A=function(){return!!e})()}function B(e,t,r,n){var o=N(H(1&n?e.prototype:e),t,r);return 2&n&&"function"==typeof o?function(e){return o.apply(r,e)}:o}function N(){return N="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=function(e,t){for(;!{}.hasOwnProperty.call(e,t)&&null!==(e=H(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},N.apply(null,arguments)}function H(e){return H=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},H(e)}function U(e,t){return U=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},U(e,t)}var V=function(e){function t(e){var r,n=e.popupSelector,o=e.formSubmiter,i=e.formResetter;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=function(e,t,r){return t=H(t),function(e,t){if(t&&("object"==T(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,A()?Reflect.construct(t,r||[],H(e).constructor):t.apply(e,r))}(this,t,[n]))._formSubmiter=o,r._popupForm=r._popup.querySelector(".popup__form"),r._inputs=Array.from(r._popupForm.querySelectorAll(".popup__input")),r._formResetter=i,r._sumbitHandler=r._sumbitHandler.bind(r),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&U(e,t)}(t,e),r=t,(n=[{key:"_getInputValues",value:function(){return this._inputs.map((function(e){return e.value}))}},{key:"setEventListeners",value:function(){B(t,"setEventListeners",this,3)([]),this._popupForm.addEventListener("submit",this._sumbitHandler)}},{key:"_sumbitHandler",value:function(e){var t=this._getInputValues();this._formSubmiter(e,t),this.close()}},{key:"close",value:function(){B(t,"close",this,3)([]),this._popupForm.removeEventListener("submit",this._sumbitHandler),this._formResetter()}}])&&x(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n}(w);function M(e){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},M(e)}function F(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,J(n.key),n)}}function J(e){var t=function(e){if("object"!=M(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=M(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==M(t)?t:t+""}function G(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(G=function(){return!!e})()}function z(e,t,r,n){var o=K(Q(1&n?e.prototype:e),t,r);return 2&n&&"function"==typeof o?function(e){return o.apply(r,e)}:o}function K(){return K="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=function(e,t){for(;!{}.hasOwnProperty.call(e,t)&&null!==(e=Q(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},K.apply(null,arguments)}function Q(e){return Q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Q(e)}function W(e,t){return W=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},W(e,t)}var X=function(e){function t(e){var r,n=e.popupSelector,o=e.removeCard,i=e.cardId,u=e.DOMElement;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=function(e,t,r){return t=Q(t),function(e,t){if(t&&("object"==M(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,G()?Reflect.construct(t,r||[],Q(e).constructor):t.apply(e,r))}(this,t,[n]))._removeCard=o,r._cardId=i,r._DOMElement=u,r._clickHandler=r._clickHandler.bind(r),r._confirmationButton=document.querySelector(".popup-with-confirmation__submit-button"),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&W(e,t)}(t,e),r=t,(n=[{key:"setEventListeners",value:function(){z(t,"setEventListeners",this,3)([]),this._confirmationButton.addEventListener("click",this._clickHandler)}},{key:"_clickHandler",value:function(){this._removeCard(this._cardId,this._DOMElement),this.close()}},{key:"close",value:function(){z(t,"close",this,3)([]),this._confirmationButton.removeEventListener("click",this._clickHandler)}}])&&F(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n}(w);function Y(e){return Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Y(e)}function Z(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,$(n.key),n)}}function $(e){var t=function(e){if("object"!=Y(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=Y(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Y(t)?t:t+""}var ee,te,re,ne=new(function(){return e=function e(t){var r=t.makeRequest,n=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._makeRequest=r,this._headers=n},(t=[{key:"getUser",value:function(){var e={method:"GET",headers:this._headers};return this._makeRequest("users/me",e)}},{key:"getInitialCards",value:function(){var e={method:"GET",headers:this._headers};return this._makeRequest("cards",e)}},{key:"saveProfileInfo",value:function(e){var t={method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})};return this._makeRequest("users/me",t)}},{key:"addCard",value:function(e,t){var r={method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})};return this._makeRequest("cards",r)}},{key:"addCardLike",value:function(e){var t="cards/".concat(e,"/likes"),r={method:"PUT",headers:this._headers};return this._makeRequest(t,r)}},{key:"removeCardLike",value:function(e){var t="cards/".concat(e,"/likes"),r={method:"DELETE",headers:this._headers};return this._makeRequest(t,r)}},{key:"deleteCard",value:function(e){var t="cards/".concat(e),r={method:"DELETE",headers:this._headers};return this._makeRequest(t,r)}},{key:"updateProfilePicture",value:function(e){var t={method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})};return this._makeRequest("users/me/avatar",t)}}])&&Z(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}())({makeRequest:function(e,t){return fetch("https://around-api.pt-br.tripleten-services.com/v1/".concat(e),t)},headers:{authorization:"46bfb3be-dbce-4d6f-9db9-127f775222d9","Content-Type":"application/json"}});function oe(e){e.isLiked=!0;var t=e._id;ne.addCardLike(t).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).then((function(e){console.log(e)})).catch((function(e){console.log(e)}))}function ie(e){e.isLiked=!1;var t=e._id;ne.removeCardLike(t).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).then((function(e){console.log(e)})).catch((function(e){console.log(e)}))}function ue(e,t){ne.deleteCard(e).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).then((function(e){console.log(e),t.remove()})).catch((function(e){console.log(e)}))}function ce(e,t){new X({popupSelector:".popup-with-confirmation__container",removeCard:ue,cardId:e,DOMElement:t}).open()}var ae=new S({profileNameSelector:".profile__name",profileDescriptionSelector:".profile__description"});ne.getUser().then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).then((function(e){ee=e,ae.setUserInfo(ee),ne.getInitialCards().then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).then((function(e){console.log(e);var t=e.reverse();re=new R(".image-popup__container"),(te=new p({items:t,renderer:function(e){var t=new h({item:e,templateSelector:"#card-template",handleCardClick:function(e){return re.open(e)},addLike:oe,removeLike:ie,user:ee,removeCard:ue,handleDeleteClick:ce}),r=t.generateCard();te.addItem(r)}},".gallery__cards")).renderItems()})).catch((function(e){console.log(e)}))})).catch((function(e){console.log(e)})),Array.from(document.forms).forEach((function(e){new u(c,e).enableValidation(c,e)}));var le=new V({popupSelector:".edit-profile-popup__container",formSubmiter:function(e,t){e.preventDefault();var r=t[0],n=t[1],o=document.querySelector(".edit-profile-popup__submit-button");o.textContent="Salvando...",ne.saveProfileInfo({name:r,about:n}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).then((function(e){ee=e,ae.setUserInfo(ee)})).catch((function(e){console.log(e)})).finally((function(){o.textContent="Salvar"}))},formResetter:a});document.querySelector(".profile__edit-icon").addEventListener("click",(function(){var e=ae.getUserInfo();document.querySelector(".edit-profile-popup__input_name").value=e.userName,document.querySelector(".edit-profile-popup__input_about").value=e.userDescription,le.open()}));var se=new V({popupSelector:".add-card-popup__container",formSubmiter:function(e,t){e.preventDefault();var r=t[0],n=t[1],o=document.querySelector(".add-card-popup__submit-button");o.textContent="Salvando...",ne.addCard(r,n).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).then((function(e){console.log(e);var t=new h({item:e,templateSelector:"#card-template",handleCardClick:function(e){return re.open(e)},addLike:oe,removeLike:ie,user:ee,removeCard:ue,handleDeleteClick:ce}).generateCard();te.addItem(t)})).catch((function(e){console.log(e)})).finally((function(){o.textContent="Criar"})),o.classList.add("popup__submit-button_inactive"),o.setAttribute("disabled",!0)},formResetter:a});document.querySelector(".profile__add-button").addEventListener("click",(function(){se.open()}));var fe=new V({popupSelector:".update-profile-picture-popup__container",formSubmiter:function(e,t){e.preventDefault();var r=t[0],n=document.querySelector(".update-profile-picture-popup__submit-button");n.textContent="Salvando...",ne.updateProfilePicture(r).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).then((function(e){ae.setUserInfo(e)})).catch((function(e){console.log(e)})).finally((function(){n.textContent="Salvar"}))},formResetter:a});document.querySelector(".profile__picture-container").addEventListener("click",(function(){fe.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,